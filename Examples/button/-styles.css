@import "normalize.css";
.no-user-select {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -moz-user-select: -moz-none;
  -ms-user-select: none;
  user-select: none;
}
.position-sticky {
  position: sticky;
  position: -webkit-sticky;
  position: -moz-sticky;
  position: -ms-sticky;
  position: -o-sticky;
}
.antialiased-fonts {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
.no-list-style {
  list-style: none;
  list-style-type: none;
}
.firstlast-no-vertical-margin:first-of-type {
  margin-top: 0;
}
.firstlast-no-vertical-margin:last-of-type {
  margin-bottom: 0;
}
.firstlast-no-horizontal-margin:first-of-type {
  margin-left: 0;
}
.firstlast-no-horizontal-margin:last-of-type {
  margin-right: 0;
}
.fuck-hyperlink-decoration a {
  text-decoration: none;
}
.fuck-this-list {
  padding: 0;
  margin: 0;
  list-style: none;
  list-style-type: none;
}
.fuck-this-list li {
  list-style: none;
  list-style-type: none;
}
.fuck-this-list li li {
  list-style: none;
  list-style-type: none;
}
.fuck-this-list li li li {
  list-style: none;
  list-style-type: none;
}
.word-break-all {
  white-space: -moz-pre-wrap !important;
  /* Mozilla, since 1999 */
  white-space: -pre-wrap;
  /* Opera 4-6 */
  white-space: -o-pre-wrap;
  /* Opera 7 */
  white-space: pre-wrap;
  /* css-3 */
  word-wrap: break-word;
  /* Internet Explorer 5.5+ */
  white-space: -webkit-pre-wrap;
  /* Newer versions of Chrome/Safari*/
  word-break: break-all;
  white-space: normal;
}
/*

-ms-word-break: break-all;

     // Be VERY careful with this, breaks normal words wh_erever
     word-break: break-all;

     // Non standard for webkit
     word-break: break-word;
*/
.hack-center-vertical {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}
/*

.class1 {.transition();}
.class2 {.transition(width 2s, height 2s;);}
                                        ^
                                   semicolon here
.class3 {.transition(@prop1 @dur1, @prop2 @dur2;);}
                                               ^
                                         semicolon here

MAKE SURE YOU PUT A SEMICOLON AT THE END.
It forces LESS to see the commas as part of the parameter, not a parameter delimiter.

*/
/*

gutter
--------------------------------------------------------------------------------
Gives margins for flexbox items that compensates for the bounds of the container
- margins will only exist between the items, and not sit along the edges of the
container.

Use the mixin on the container.




arguments:
- gutter(<margin>);
Uniformly gives the same margin to all items.

- gutter(<vertical margin>; <horizontal margin>);
Gives different horizontal and vertical margins.

*/
.gutter-clear {
  overflow: hidden;
}
body {
  margin: 0;
  padding: 0;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
@-webkit-viewport {
  width: device-width;
}
@-moz-viewport {
  width: device-width;
}
@-ms-viewport {
  width: device-width;
}
@-o-viewport {
  width: device-width;
}
@viewport {
  width: device-width;
}
.input-compound {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
}
.input-compound > * {
  margin-bottom: -1px;
  margin-right: 0;
}
.input-compound > *:first-child {
  margin-top: 0;
  margin-left: 0;
}
.input-compound > * {
  -webkit-flex: 1 0 auto;
  -moz-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  -o-flex: 1 0 auto;
  flex: 1 0 auto;
}
/* 	buttons have weird properties.
	in order to evade them, you have to
	make a container inside (again, ooh boy!)

	and in that container, you can position however you please.
*/
button {
  cursor: pointer;
  margin-left: 0;
  margin-right: 0;
}
button > div {
  width: 100%;
  height: 100%;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-box-align: center;
  -o-box-align: center;
  box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  -moz-align-items: center;
  -ms-align-items: center;
  -o-align-items: center;
  align-items: center;
  -webkit-box-pack: center;
  -moz-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  -moz-justify-content: center;
  -ms-justify-content: center;
  -o-justify-content: center;
  justify-content: center;
}
button > div > * {
  -webkit-flex: 0 0 auto;
  -moz-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  -o-flex: 0 0 auto;
  flex: 0 0 auto;
}
.btn-no-text .text {
  display: none;
}
button.btn-no-text .text {
  display: none;
}
input[type="text"] {
  -webkit-appearance: none;
  width: 0%;
}
input.center {
  text-align: center;
}
input:focus {
  outline: 0;
}
.dropdown {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -moz-user-select: -moz-none;
  -ms-user-select: none;
  user-select: none;
}
.dropdown .dropdown-i {
  cursor: pointer;
}
.dropdown .dropdown-menu {
  position: relative;
  margin-top: 0;
  background-color: #000;
}
.dropdown .dropdown-menu.list > .container {
  padding: 8px 16px;
}
.dropdown .dropdown-menu.list > .container > * {
  cursor: pointer;
  height: 36px;
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  -ms-box-orient: horizontal;
  -o-box-orient: horizontal;
  box-orient: horizontal;
  -webkit-flex-direction: row;
  -moz-flex-direction: row;
  -ms-flex-direction: row;
  -o-flex-direction: row;
  flex-direction: row;
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-box-align: center;
  -o-box-align: center;
  box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  -moz-align-items: center;
  -ms-align-items: center;
  -o-align-items: center;
  align-items: center;
}
.dropdown .dropdown-menu.list > .container [class*='ic-'] {
  -webkit-flex: 0 0 auto;
  -moz-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  -o-flex: 0 0 auto;
  flex: 0 0 auto;
  margin-right: 6px;
}
.dropdown .dropdown-menu.list > .container .text {
  -webkit-flex: 1 0 auto;
  -moz-flex: 1 0 auto;
  -ms-flex: 1 0 auto;
  -o-flex: 1 0 auto;
  flex: 1 0 auto;
  white-space: nowrap;
  overflow: hidden;
}
.dropdown .dropdown-menu.list > .container .separator {
  cursor: default;
  height: 1px;
  margin: 8px 0px;
  border-bottom: 1px solid;
}
.dropdown .dropdown-menu.box-left {
  float: left;
}
.dropdown .dropdown-menu.box-right {
  float: right;
}
.dropdown .dropdown-menu.box-center {
  float: left;
  margin-left: -100%;
  -webkit-transform: translateX(50%);
  -moz-transform: translateX(50%);
  -ms-transform: translateX(50%);
  -o-transform: translateX(50%);
}
.dropdown .dropdown-menu.text-left {
  text-align: left;
}
.dropdown .dropdown-menu.text-right {
  text-align: right;
}
.dropdown .dropdown-menu.text-center {
  text-align: center;
}
.dropdown-menu.anim-default {
  display: none;
}
.dropdown.selected .dropdown-menu.anim-default {
  display: block;
}
.dropdown .dropdown-menu.anim-menu {
  margin-top: 0;
  max-height: 0;
  opacity: 0;
  transition: all 0.2s ease-out;
  -moz-transition: all 0.2s ease-out;
  /* Firefox 4 */
  -webkit-transition: all 0.2s ease-out;
  /* Safari and Chrome */
  -o-transition: all 0.2s ease-out;
  /* Opera */
  overflow: hidden;
}
.dropdown.selected .dropdown-menu.anim-menu {
  margin-top: 10px;
  opacity: 1;
}
.dropdown .dropdown-menu.anim-slide-down {
  max-height: 0px;
  transition: max-height 0.3s cubic-bezier(0.44, 0.93, 0.44, 1);
  -moz-transition: max-height 0.3s cubic-bezier(0.44, 0.93, 0.44, 1);
  /* Firefox 4 */
  -webkit-transition: max-height 0.3s cubic-bezier(0.44, 0.93, 0.44, 1);
  /* Safari and Chrome */
  -o-transition: max-height 0.3s cubic-bezier(0.44, 0.93, 0.44, 1);
  /* Opera */
  overflow: hidden;
}
.dropdown.selected .dropdown-menu.anim-slide-down {
  max-height: 400px;
}
.flexlinear {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
}
.flexlinear.rows {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
}
.flexlinear.rows > * {
  -webkit-flex: 0 0 auto;
  -moz-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  -o-flex: 0 0 auto;
  flex: 0 0 auto;
}
.flexlinear.rows .spacer-end {
  -webkit-flex: 1 1 auto;
  -moz-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  -o-flex: 1 1 auto;
  flex: 1 1 auto;
}
.flexlinear.columns {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -ms-box-orient: vertical;
  -o-box-orient: vertical;
  box-orient: vertical;
  -webkit-flex-direction: column;
  -moz-flex-direction: column;
  -ms-flex-direction: column;
  -o-flex-direction: column;
  flex-direction: column;
}
.flexlinear.columns > * {
  -webkit-flex: 0 0 auto;
  -moz-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  -o-flex: 0 0 auto;
  flex: 0 0 auto;
}
.flexlinear.columns .spacer-end {
  -webkit-flex: 1 1 auto;
  -moz-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  -o-flex: 1 1 auto;
  flex: 1 1 auto;
}
.spacer-end {
  -webkit-flex: 1 1 auto;
  -moz-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  -o-flex: 1 1 auto;
  flex: 1 1 auto;
}
.flexwrap {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
  -webkit-lines: multiple;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -ms-box-lines: multiple;
  -o-box-lines: multiple;
  box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  -o-flex-wrap: wrap;
  flex-wrap: wrap;
}
.flexwrap.rows {
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  -ms-box-orient: horizontal;
  -o-box-orient: horizontal;
  box-orient: horizontal;
  -webkit-flex-direction: row;
  -moz-flex-direction: row;
  -ms-flex-direction: row;
  -o-flex-direction: row;
  flex-direction: row;
}
.flexwrap.columns {
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -ms-box-orient: vertical;
  -o-box-orient: vertical;
  box-orient: vertical;
  -webkit-flex-direction: column;
  -moz-flex-direction: column;
  -ms-flex-direction: column;
  -o-flex-direction: column;
  flex-direction: column;
}
/*
  Creates a series of boxes with static dimension
  across the main axis that wrap.

  Similar to display: inline-block;, but without the inherent strangeness.

  To give the main axis dimension, use width/height,
  depending on the flex-direction.
*/
.flexblocks {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
  -webkit-lines: multiple;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -ms-box-lines: multiple;
  -o-box-lines: multiple;
  box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  -o-flex-wrap: wrap;
  flex-wrap: wrap;
}
.flexblocks > * {
  -webkit-flex: 0 0 auto;
  -moz-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  -o-flex: 0 0 auto;
  flex: 0 0 auto;
}
.flexblocks.rows {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
  -webkit-lines: multiple;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -ms-box-lines: multiple;
  -o-box-lines: multiple;
  box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  -o-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-orient: horizontal;
  -moz-box-orient: horizontal;
  -ms-box-orient: horizontal;
  -o-box-orient: horizontal;
  box-orient: horizontal;
  -webkit-flex-direction: row;
  -moz-flex-direction: row;
  -ms-flex-direction: row;
  -o-flex-direction: row;
  flex-direction: row;
}
.flexblocks.rows > * {
  -webkit-flex: 0 0 auto;
  -moz-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  -o-flex: 0 0 auto;
  flex: 0 0 auto;
}
.flexblocks.columns {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
  -webkit-lines: multiple;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -ms-box-lines: multiple;
  -o-box-lines: multiple;
  box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  -o-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-orient: vertical;
  -moz-box-orient: vertical;
  -ms-box-orient: vertical;
  -o-box-orient: vertical;
  box-orient: vertical;
  -webkit-flex-direction: column;
  -moz-flex-direction: column;
  -ms-flex-direction: column;
  -o-flex-direction: column;
  flex-direction: column;
}
.flexblocks.columns > * {
  -webkit-flex: 0 0 auto;
  -moz-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  -o-flex: 0 0 auto;
  flex: 0 0 auto;
}
.flexblocks {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
  -webkit-lines: multiple;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -ms-box-lines: multiple;
  -o-box-lines: multiple;
  box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  -o-flex-wrap: wrap;
  flex-wrap: wrap;
}
.flexblocks > * {
  -webkit-flex: 0 0 auto;
  -moz-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  -o-flex: 0 0 auto;
  flex: 0 0 auto;
}
/*
  Combined with HTML elements to create the desired effect.

  There must be items with 'dummy' class (invisible items) to
  create the grid effect.

  You need n-1 hidden blocks for how many items along the main axis you think
  will fill the container before wrapping.

  You need to specify a direction. You can do this in HTML with the included
  classes if it's going to be static, or you can use mixins and switch
  between them if they need to change based on certain circumstances.

*/
.flexgrid.rows {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
  -webkit-lines: multiple;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -ms-box-lines: multiple;
  -o-box-lines: multiple;
  box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  -o-flex-wrap: wrap;
  flex-wrap: wrap;
}
.flexgrid.rows > * {
  -webkit-flex: 1 1 auto;
  -moz-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  -o-flex: 1 1 auto;
  flex: 1 1 auto;
}
.flexgrid.rows > .dummy {
  height: 0px;
  border-top: none;
  border-bottom: none;
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  padding-top: 0 !important;
  padding-bottom: 0 !important;
}
.flexgrid.columns {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
  -webkit-lines: multiple;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -ms-box-lines: multiple;
  -o-box-lines: multiple;
  box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -moz-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  -o-flex-wrap: wrap;
  flex-wrap: wrap;
}
.flexgrid.columns > * {
  -webkit-flex: 1 1 auto;
  -moz-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  -o-flex: 1 1 auto;
  flex: 1 1 auto;
}
.flexgrid.columns > .dummy {
  width: 0px;
  border-left: none;
  border-right: none;
  margin-left: 0 !important;
  margin-right: 0 !important;
  padding-left: 0 !important;
  padding-right: 0 !important;
}
/*
  Simple way to center something using flexbox without having to
  apply all of the styles.
*/
.flexcenter {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-box;
  display: -o-box;
  display: box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: -moz-flex;
  display: -ms-flex;
  display: -o-flex;
  display: flex;
  -webkit-box-align: center;
  -moz-box-align: center;
  -ms-box-align: center;
  -o-box-align: center;
  box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  -moz-align-items: center;
  -ms-align-items: center;
  -o-align-items: center;
  align-items: center;
  -webkit-box-pack: center;
  -moz-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  -moz-justify-content: center;
  -ms-justify-content: center;
  -o-justify-content: center;
  justify-content: center;
}
[class*="ic-"],
[class*="ind-"] {
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
}
.size-9 {
  font-size: 9px;
  width: 9px;
  height: 9px;
}
.size-15 {
  font-size: 15px;
  width: 15px;
  height: 15px;
}
.size-17 {
  font-size: 17px;
  width: 17px;
  height: 17px;
}
.size-25 {
  font-size: 25px;
  width: 25px;
  height: 25px;
}
.size-33 {
  font-size: 33px;
  width: 33px;
  height: 33px;
}
.size-49 {
  font-size: 49px;
  width: 49px;
  height: 49px;
}
@font-face {
  font-family: 'acetone-icon';
  src: url('fonts/acetone-icon.ttf?imfb2w') format('truetype'), url('fonts/acetone-icon.woff?imfb2w') format('woff'), url('fonts/acetone-icon.svg?imfb2w#acetone-icon') format('svg');
  font-weight: normal;
  font-style: normal;
}
[class^="ic-"],
[class*=" ic-"] {
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: 'acetone-icon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
.ic-add:before {
  content: "\e909";
}
.ic-arrow-down:before {
  content: "\e910";
}
.ic-arrow-left:before {
  content: "\e911";
}
.ic-arrow-right:before {
  content: "\e912";
}
.ic-arrow-up:before {
  content: "\e913";
}
.ic-download:before {
  content: "\e91f";
}
.ic-dropdown:before {
  content: "\e920";
}
.ic-filter:before {
  content: "\e921";
}
.ic-ind-dropdown-9:before {
  content: "\e924";
}
.ic-ind-dropdown-13:before {
  content: "\e925";
}
.ic-ind-dropdown-17:before {
  content: "\e926";
}
.ic-link:before {
  content: "\e92b";
}
.ic-location:before {
  content: "\e92d";
}
.ic-lock:before {
  content: "\e92e";
}
.ic-menu:before {
  content: "\e930";
}
.ic-more:before {
  content: "\e931";
}
.ic-no:before {
  content: "\e932";
}
.ic-redo:before {
  content: "\e936";
}
.ic-refresh:before {
  content: "\e937";
}
.ic-remove:before {
  content: "\e93a";
}
.ic-reply:before {
  content: "\e93b";
}
.ic-sort:before {
  content: "\e941";
}
.ic-tag-25:before {
  content: "\e942";
}
.ic-undo:before {
  content: "\e944";
}
.ic-yes:before {
  content: "\e94a";
}
.input-font {
  font-size: 12pt;
}
button.base {
  height: 41px;
  min-width: 41px;
  padding: 0 7px;
  border: 1px solid;
  font-size: 12pt;
  color: #000;
  border-color: #000;
}
button.base:active {
  color: #fff;
  background-color: #333;
}
input[type="text"].base {
  height: 41px;
  min-width: 250px;
  padding: 0 7px;
  border: 1px solid;
  background-color: inherit;
  color: #000;
  font-size: 12pt;
}
input[type="text"].base::-webkit-input-placeholder {
  /* WebKit, Blink, Edge */
  color: #333333;
}
input[type="text"].base:-moz-placeholder {
  /* Mozilla Firefox 4 to 18 */
  color: #333333;
  opacity: 1;
}
input[type="text"].base::-moz-placeholder {
  /* Mozilla Firefox 19+ */
  color: #333333;
  opacity: 1;
}
input[type="text"].base:-ms-input-placeholder {
  /* Internet Explorer 10-11 */
  color: #333333;
}
input.base:focus {
  border: 1px solid #000;
}
body {
  padding: 20px;
}
.inputlayout {
  margin-top: -50px;
  margin-left: -10px;
}
.inputlayout > * {
  margin-top: 50px;
  margin-left: 10px;
}
